name: Restore snapshot db from Azure storage

on:
  workflow_dispatch:
    inputs:
      environment:
        description: Environment to backup
        required: true
        default: production
        type: choice
        options:
          - staging
          - sandbox
          - production
      backup-file:
        description: |
          Backup file name (without extension). Default is cpdec2_[env]_adhoc_YYYY-MM-DD. Set it explicitly when backing up a point-in-time (PTR) server. (Optional)
        required: false
        type: string
        default: default

  workflow_call:
    secrets:
      azure-client-id:
        description: Azure service principal or managed identity client ID when using OIDC
        required: true
      azure-subscription-id:
        description: Azure service principal or managed identity subscription ID when using OIDC
        required: true
      azure-tenant-id:
        description: Azure service principal or managed identity tenant ID when using OIDC
        required: true
    inputs:
      environment:
        description: Environment to backup
        required: true
        default: production
        type: string
      backup-file:
        description: |
          Backup file name (without extension). Default is cpdec2_[env]_adhoc_YYYY-MM-DD. Set it explicitly when backing up a point-in-time (PTR) server. (Optional)
        required: false
        type: string
        default: default

env:
  SERVICE_NAME: cpd-ec2
  SERVICE_SHORT: cpdec2
  TF_VARS_PATH: config/terraform/application/config

permissions:
  id-token: write

jobs:
  backup:
    name: Backup database
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment || 'production' }}
    env:
      DEPLOY_ENV: ${{ inputs.environment || 'production'  }}
      BACKUP_FILE: ${{ inputs.backup-file || 'schedule'  }}

    steps:
      - uses: actions/checkout@v4

      - uses: azure/login@v2
        with:
          client-id: ${{ secrets.azure-client-id || secrets.AZURE_CLIENT_ID }}
          subscription-id: ${{ secrets.azure-subscription-id || secrets.AZURE_SUBSCRIPTION_ID }}
          tenant-id: ${{ secrets.azure-tenant-id || secrets.AZURE_TENANT_ID }}

      - name: Set Azure environment variables
        run: |
          # Load environment-specific configuration
          source config/global_config/${DEPLOY_ENV}.sh
          tf_vars_file=${TF_VARS_PATH}/${DEPLOY_ENV}.tfvars.json

          # Set Azure environment variables
          echo "CLUSTER=$(jq -r '.cluster' ${tf_vars_file})" >> $GITHUB_ENV
          echo "NAMESPACE=$(jq -r '.namespace' ${tf_vars_file})" >> $GITHUB_ENV
          echo "RESOURCE_GROUP_NAME=${AZURE_RESOURCE_PREFIX}-${SERVICE_SHORT}-${CONFIG_SHORT}-rg" >> $GITHUB_ENV
          echo "STORAGE_ACCOUNT_NAME=${AZURE_RESOURCE_PREFIX}${SERVICE_SHORT}dbbkp${CONFIG_SHORT}sa" >> $GITHUB_ENV
          echo "DB_SERVER=${AZURE_RESOURCE_PREFIX}-${SERVICE_SHORT}-${CONFIG_SHORT}-pg" >> $GITHUB_ENV
          echo "KEYVAULT_NAME=${AZURE_RESOURCE_PREFIX}-${SERVICE_SHORT}-${CONFIG_SHORT}-inf-kv" >> $GITHUB_ENV

      - name: Generate the backup file name
        run: |
          # Load environment-specific configuration
          source config/global_config/${DEPLOY_ENV}.sh
          TODAY=$(date +"%F")

          # Set BACKUP_FILE variable
          if [ "${BACKUP_FILE}" == "schedule" ]; then
            BACKUP_FILE=${SERVICE_SHORT}_${CONFIG_SHORT}_${TODAY}
          elif [ "${BACKUP_FILE}" == "default" ]; then
            BACKUP_FILE=${SERVICE_SHORT}_${CONFIG_SHORT}_adhoc_${TODAY}
          else
            BACKUP_FILE=${BACKUP_FILE}
          fi
          echo "BACKUP_FILE=${BACKUP_FILE}" >> $GITHUB_ENV

      - name: Fetch secrets from key vault
        uses: azure/CLI@v2
        id: key-vault-secrets
        with:
          inlineScript: |
            SLACK_WEBHOOK=$(az keyvault secret show --name "SLACK-WEBHOOK" --vault-name ${KEYVAULT_NAME} --query "value" -o tsv)
            echo "::add-mask::$SLACK_WEBHOOK"
            echo "SLACK_WEBHOOK=$SLACK_WEBHOOK" >> $GITHUB_OUTPUT

      - name: Backup ${{ env.DEPLOY_ENV }} postgres
        uses: ./.github/actions/restore-snapshot-database-from-azure-storage
        with:
          storage-account: ${{ env.STORAGE_ACCOUNT_NAME }}
          app-name: ${{ env.SERVICE_NAME }}-${{ env.DEPLOY_ENV }}-web
          namespace: ${{ env.NAMESPACE }}
          resource-group: ${{ env.RESOURCE_GROUP_NAME }}
          cluster: ${{ env.CLUSTER }}
          azure-client-id: ${{ secrets.azure-client-id || secrets.AZURE_CLIENT_ID }}
          azure-subscription-id: ${{ secrets.azure-subscription-id || secrets.AZURE_SUBSCRIPTION_ID }}
          azure-tenant-id: ${{ secrets.azure-tenant-id || secrets.AZURE_TENANT_ID }}
          backup-file: ${{ env.BACKUP_FILE }}.sql.gz
          slack-webhook: ${{ steps.key-vault-secrets.outputs.SLACK_WEBHOOK }}
