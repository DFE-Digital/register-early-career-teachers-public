name: Directly backup main db of an environment and restore snapshot db
description: Dump main db of an environment and directly restore to snapshot db bypassing Azure Storage

inputs:
  environment:
    description: The name of the environment
    required: true
  azure-credentials:
    description: Azure credentials
    required: true
  app-name:
    description: Name of the app deployment
    required: true
  slack-webhook:
    description: Name of the slack webhook
    required: true

runs:
  using: composite

  steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Login
      uses: azure/login@v1
      with:
        creds: ${{ inputs.azure-credentials }}

    - uses: DFE-Digital/github-actions/set-kubelogin-environment@master
      with:
        azure-credentials: ${{ inputs.azure-credentials }}

    - name: Set AKS credentials
      shell: bash
      run: make ci ${{ inputs.environment }} get-cluster-credentials

    - name: Install kubectl
      uses: DFE-Digital/github-actions/set-kubectl@master

    - name: Install konduit
      shell: bash
      run: make install-konduit

    - name: Backup database
      shell: bash
      run: |
        bin/konduit.sh cpd-ec2-${{ inputs.environment }}-web -- pg_dump -E utf8 --compress=1 --clean --if-exists --no-privileges --no-owner --verbose -f backup-${{ inputs.environment }}.sql.gz

    - name: Restore snapshot database
      shell: bash
      run: bin/konduit.sh -d s189p01-cpdec2-pd-pg-snapshot -k s189p01-cpdec2-pd-inf-kv -i backup-${{ inputs.environment }}.sql.gz -c -t 7200 cpd-ec2-${{ inputs.environment }}-web -- psql

    - name: Summary
      if: success()
      shell: bash
      run: |
        NOW=$(TZ=Europe/London date +"%F %R")
        echo 'DIRECT COPY OF ${{ inputs.environment }}->SNAPSHOT DB SUCCESSFUL!' >> $GITHUB_STEP_SUMMARY
        echo '  APP: ${{ inputs.app-name }}' >> $GITHUB_STEP_SUMMARY
        echo "  AT : ${NOW}" >> $GITHUB_STEP_SUMMARY

    - name: Notify Slack channel on job success
      if: success()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_USERNAME: CI Deployment
        SLACK_TITLE: Direct copy ${{ inputs.environment }}->snapshot database succeeded
        SLACK_MESSAGE: ${{ inputs.app-name }} - the direct copy of ${{ inputs.environment }}->snapshot db succeeded
        SLACK_WEBHOOK: ${{ inputs.slack-webhook }}
        SLACK_COLOR: success
        SLACK_FOOTER: Sent from directly-backup-and-restore-snapshot-database action

    - name: Notify Slack channel on job failure
      if: failure()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_USERNAME: CI Deployment
        SLACK_TITLE: Direct copy ${{ inputs.environment }}->snapshot database failed
        SLACK_MESSAGE: ${{ inputs.app-name }} - the direct copy of ${{ inputs.environment }}->snapshot db failed
        SLACK_WEBHOOK: ${{ inputs.slack-webhook }}
        SLACK_COLOR: failures
        SLACK_FOOTER: Sent from directly-backup-and-restore-snapshot-database action
